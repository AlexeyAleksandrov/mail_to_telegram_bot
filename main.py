import imaplib
import email
from email.header import decode_header
import time
import telebot
import os
import logging
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ======
IMAP_SERVER = os.getenv('IMAP_SERVER', 'imap.yandex.ru')
IMAP_PORT = int(os.getenv('IMAP_PORT', '993'))
EMAIL_ACCOUNT = os.getenv('EMAIL_ACCOUNT')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', '300'))

# ====== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ======
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# ====== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø ======
PROCESSED_EMAILS_FILE = 'data/processed_emails.json'


def load_processed_emails():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö UID –ø–∏—Å–µ–º."""
    try:
        if os.path.exists(PROCESSED_EMAILS_FILE):
            with open(PROCESSED_EMAILS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return set(data.get('processed_uids', []))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {e}")
    return set()


def save_processed_email(uid):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç UID –ø–∏—Å—å–º–∞ –≤ —Ñ–∞–π–ª."""
    try:
        processed_uids = load_processed_emails()
        processed_uids.add(uid)

        data = {
            'processed_uids': list(processed_uids),
            'last_updated': time.time()
        }

        with open(PROCESSED_EMAILS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞: {e}")


def clean_text(text):
    """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    if text:
        return " ".join(text.split())
    return ""


def decode_mime_words(encoded_str):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ MIME-—Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–º—É –ø–∏—Å—å–º–∞)."""
    if encoded_str is None:
        return ""
    decoded_parts = decode_header(encoded_str)
    decoded_str = ""
    for part, encoding in decoded_parts:
        if isinstance(part, bytes):
            if encoding:
                decoded_str += part.decode(encoding)
            else:
                decoded_str += part.decode('utf-8', errors='ignore')
        else:
            decoded_str += part
    return decoded_str


def get_email_body(msg):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞."""
    body = ""
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            content_disposition = str(part.get("Content-Disposition"))
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
            if "attachment" in content_disposition:
                continue
            if content_type == "text/plain":
                payload = part.get_payload(decode=True)
                if payload:
                    charset = part.get_content_charset() or 'utf-8'
                    try:
                        body += payload.decode(charset, errors='replace')
                    except:
                        body += payload.decode('utf-8', errors='replace')
    else:
        # –ü–∏—Å—å–º–æ –Ω–µ multipart, –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º payload
        payload = msg.get_payload(decode=True)
        if payload:
            charset = msg.get_content_charset() or 'utf-8'
            try:
                body = payload.decode(charset, errors='replace')
            except:
                body = payload.decode('utf-8', errors='replace')
    return clean_text(body)


def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è Telegram."""
    if not text:
        return ""
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = text.replace(char, '\\' + char)
    return text


def check_new_emails_and_notify():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        mail = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)
        mail.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
        mail.select("INBOX")  # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        processed_emails = load_processed_emails()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_emails)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")

        # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        status, messages = mail.search(None, "UNSEEN")
        if status != "OK":
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∏—Å–µ–º")
            return

        email_ids = messages[0].split()
        bot = telebot.TeleBot(BOT_TOKEN)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {len(email_ids)}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ
        for e_id in email_ids:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º BODY.PEEK –≤–º–µ—Å—Ç–æ FETCH —á—Ç–æ–±—ã –Ω–µ –ø–æ–º–µ—á–∞—Ç—å –ø–∏—Å—å–º–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                status, msg_data = mail.fetch(e_id, "(BODY.PEEK[])")
                if status != "OK":
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ {e_id}")
                    continue

                msg = email.message_from_bytes(msg_data[0][1])

                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∏—Å—å–º–∞ (UID + –¥–∞—Ç–∞ + –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å)
                message_id = msg.get('Message-ID', '')
                date = msg.get('Date', '')
                from_ = msg.get('From', '')

                # –ï—Å–ª–∏ –Ω–µ—Ç Message-ID, —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                if not message_id:
                    message_id = f"{e_id.decode()}_{date}_{from_}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ –ø–∏—Å—å–º–æ
                if message_id in processed_emails:
                    logger.info(f"–ü–∏—Å—å–º–æ {message_id} —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                subject = decode_mime_words(msg["Subject"])
                from_ = decode_mime_words(msg["From"])
                to_ = decode_mime_words(msg["To"])
                date_ = msg["Date"]

                # –ï—Å–ª–∏ —Ç–µ–º—ã –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if not subject:
                    subject = "(–ë–µ–∑ —Ç–µ–º—ã)"

                body = get_email_body(msg)

                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                subject_escaped = escape_markdown(subject)
                from_escaped = escape_markdown(from_)
                to_escaped = escape_markdown(to_)
                date_escaped = escape_markdown(date_)
                body_escaped = escape_markdown(body)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                telegram_message = (
                    f"üì® *–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ*\n\n"
                    f"*–û—Ç:* {from_escaped}\n"
                    f"*–ö–æ–º—É:* {to_escaped}\n"
                    f"*–î–∞—Ç–∞:* {date_escaped}\n"
                    f"*–¢–µ–º–∞:* {subject_escaped}\n\n"
                    f"*–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:*\n{body_escaped[:1000]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                bot.send_message(CHAT_ID, telegram_message, parse_mode="Markdown")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–∏—Å—å–º–∞ ID: {e_id.decode()} –æ—Ç {from_}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –ø–∏—Å—å–º–µ
                save_processed_email(message_id)
                logger.info(f"–ü–∏—Å—å–º–æ {message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å—å–º–∞ {e_id}: {str(e)}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                try:
                    # ... (–∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)
                    pass
                except Exception as e2:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ {e_id} –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e2)}")

        mail.close()
        mail.logout()

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


# ====== –ó–ê–ü–£–°–ö ======
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['EMAIL_ACCOUNT', 'EMAIL_PASSWORD', 'BOT_TOKEN', 'CHAT_ID']
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        exit(1)

    logger.info("–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –∑–∞–ø—É—â–µ–Ω...")
    logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")

    while True:
        check_new_emails_and_notify()
        time.sleep(CHECK_INTERVAL)